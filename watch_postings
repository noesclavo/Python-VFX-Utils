#!/usr/bin/env python3

import sys
import time
import os
import subprocess
from m_lib.misc import Print

m = Print()

from watchdog.observers import Observer
from watchdog.events import (FileSystemEventHandler, PatternMatchingEventHandler)

EXEC = '/Users/miles/Bin/python/make_viewing_copy'
TEMP = '/mnt/storage/jobs/tmp'

class Watch(object):

    def __init__(self, path):
        self.path = path
        self.pid = os.getpid()
        self.name = os.path.normpath(__file__)

    def run(self):
        self.observer = Observer()

        event_handler = Handler()
        self.observer.schedule(event_handler, self.path, recursive=True)
        self.observer.start()

        try:
            while self.observer.is_alive():
                self.observer.join(1)
        except KeyboardInterrupt:
            self.observer.stop()
            print('\nObserver killed: {} [{}]'.format(self.name, self.pid))
        except (OSError, ValueError) as e:
            m.error(f'Error: {sys.exc_info()[0]} : {e.args}')
            info = sys.exc_info()[1]
            m.error(f'Error: {info}')
            self.observer.stop()
            print("Observer Stopped")

        self.observer.join(1)


class Handler(PatternMatchingEventHandler):
    def __init__(self):
        super(Handler, self).__init__(patterns=['*.mov'], ignore_patterns=['*.mp4', '*.wav', '*.mp3', '*aif', '*.aaf', '*.edl'])

    def on_created(self, event):

        import sys
        import re
        from math import modf
        from datetime import date
        from datetime import datetime

        print()
        m.warn(datetime.now().strftime('%Y/%m/%d-%H:%M:%S'))
        m.success(f'New quicktime {event.event_type}: {event.src_path}', ':')

        directory = None
        newly_created = event.src_path

        if os.path.isdir(newly_created):
            directory = newly_created
            print('New Directory: {} ...'.format(directory))
        elif re.search(r'.mov$', newly_created):
            directory = os.path.dirname(newly_created)

            mov_filepath = newly_created
            mov_file = os.path.basename(mov_filepath)
            (filename, extension) = os.path.splitext(mov_filepath)
            (filename, extension) = os.path.splitext(mov_file)

            mp4_file = filename + '.mp4'
            mp4_filepath = re.sub(r'.mov$', '.mp4', newly_created)
            mp4_filepath = re.sub(f'{directory}', f'{directory}/h264', mp4_filepath)


            file_size = -1

            while file_size < os.path.getsize(mov_filepath):
                file_size = os.path.getsize(mov_filepath)
                time.sleep(2)

            time.sleep(2)
            m.success(f'Converting {mov_file} to: {mp4_filepath}', ':')

            ffprobee = 'ffprobe -v error  -select_streams v:0 -show_entries stream=width,height -of csv=s=\::p=0 {}'.format(newly_created)
            m.warn(f'Executing -- {ffprobee}', '--')
            ffprobe = [
                'ffprobe', '-v', 'error',
                '-select_streams', 'v:0',
                '-show_entries',
                'stream=width,height',
                '-of',
                'csv=s=\::p=0',
                f'{newly_created}'
            ]

            size = 0
            try:
                size = subprocess.check_output(ffprobe, universal_newlines=True).strip()
            except (OSError, ValueError) as e:
                info = sys.exc_info()[1]
                m.error(f'Error: {sys.exc_info()[0]}, {ffprobe}) : {e.args}')
                m.error(f'Error: {info}')
                return
            except RuntimeError as e:
                info = sys.exc_info()[1]
                m.error(f'Runtime Error: {sys.exc_info()[0]}, {ffprobe}) : {e.args}')
                m.error(f'Runtime Error: {info}')
                return
            except:
                m.error(f'Unknown Error -- {ffprobee}', '--')
                return


            [width, height] = list(map(int, size.split(':')))
            width  = int(modf(width * .667)[-1])
            height  = int(modf(height * .667)[-1])
            resolution = '{0}:{1}'.format(width, height)

            h264_directory = os.path.join(directory, 'h264')
            prores_directory = os.path.join(directory, 'prores')

            for d in (h264_directory, prores_directory):
                if not os.path.isdir(d):
                    try:
                        os.mkdir(d, 0o777)
                    except (OSError, ValueError) as e:
                        print(f'Error: {sys.exc_info()[0]}, os.mkdir({d}, 0o777) : {e.args}')
                        info = sys.exc_info()[1]
                        m.error(f'Error: {info}')
                        print(f'\tos.mkdir(\n\t\t{d}, 0o777)')
                        return

            ffmpeg = 'time ffmpeg -v 0 -y -threads 24 -stats -i {0} -vf scale={1} -c:v libx264 -preset veryslow -crf 20 -pix_fmt yuv420p -tune grain {2}'.format(mov_filepath, resolution, mp4_filepath)
            ffmpeg = [
                'time', 'ffmpeg', '-v', '0', '-y',
                '-threads', '24',
                '-stats',
                '-i', f'{mov_filepath}',
                '-vf', f'scale={resolution}',
                '-c:v', 'libx264', '-preset', 'veryslow', '-crf', '20', '-pix_fmt', 'yuv420p', '-tune', 'grain',
                f'{mp4_filepath}'
            ]

            try:
                mp4 = subprocess.check_output(ffmpeg, universal_newlines=True).strip()
                print(mp4)
            except (OSError, ValueError) as e:
                m.error(f'Error: {sys.exc_info()[0]}, FFMpeg Conversion Failed) : {e.args}', ':')
                info = sys.exc_info()[1]
                m.error(f'Error: {info}', ':')

            mov_dest = os.path.join(prores_directory, mov_file)

            try: 
                os.rename(mov_filepath, mov_dest)
                m.success(f'Moving:\n\t{mov_filepath} to\n\t{mov_dest}.', ':')
            except (OSError, ValueError) as e:
                info = sys.exc_info()[1]
                m.error(f'Error: {info}')
                m.error(f'\tos.rename(\n\t\t{mov_filepath}:\n\t\t{os.path.join(prores_directory, mov_file)}\n\t)', ':')
                return


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--path', help='Directory to watch..', action='store', required=True)
    args = parser.parse_args()

    path = os.path.normpath(os.path.abspath(args.path))


    watch = Watch(path)
    watch.run()
