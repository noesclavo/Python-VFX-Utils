#!/usr/bin/env python3

import sys
import time
import os
import subprocess
from m_lib.misc import Print

m = Print()

from watchdog.observers import Observer
from watchdog.events import (FileSystemEventHandler, PatternMatchingEventHandler)

EXEC = '/Users/miles/Bin/python/make_viewing_copy'
TEMP = '/mnt/storage/jobs/tmp'

class Watch(object):

    def __init__(self, path):
        self.path = path
        self.pid = os.getpid()
        self.name = os.path.normpath(__file__)

    def run(self):
        self.observer = Observer()

        event_handler = Handler()
        self.observer.schedule(event_handler, self.path, recursive=True)
        self.observer.start()

        file_size = -1

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.observer.stop()
            print('\nObserver killed: {} [{}]'.format(self.name, self.pid))
        except:
            self.observer.stop()
            print("Observer Stopped")

        self.observer.join()


class Handler(PatternMatchingEventHandler):
    def __init__(self):
        super(Handler, self).__init__(ignore_patterns=['*.mp4', 'prores', 'h264'])

    def on_created(self, event):

        import sys
        import re
        from math import modf

        m.success(f'{event.event_type}: {event.src_path}')

        directory = None
        newly_created = event.src_path

        if os.path.isdir(newly_created):
            directory = newly_created
            print('New Directory: {} ...'.format(directory))
        elif re.search(r'.mov$', newly_created):
            directory = os.path.dirname(newly_created)

            mov_filepath = newly_created
            mov_file = os.path.basename(mov_filepath)
            (filename, extension) = os.path.splitext(mov_filepath)

            mp4_file = filename + '.mp4'
            mp4_filepath = re.sub(r'.mov$', '.mp4', newly_created)
            mp4_filepath = re.sub(f'{directory}', f'{directory}/h264', mp4_filepath)

            m.warn(f'MOV file: {mov_filepath}')
            m.warn(f'MP4 file: {mp4_filepath}')

            file_size = -1

            while file_size < os.path.getsize(mov_filepath):
                file_size = os.path.getsize(mov_filepath)
                time.sleep(1)

            ffprobe = 'ffprobe -v error  -select_streams v:0 -show_entries stream=width,height -of csv=s=\::p=0 {}'.format(newly_created)
            size = subprocess.check_output(ffprobe.split(), universal_newlines=True).strip()

            [width, height] = list(map(int, size.split(':')))
            width  = int(modf(width * .667)[-1])
            height  = int(modf(height * .667)[-1])
            resolution = '{0}:{1}'.format(width, height)

            h264_directory = os.path.join(directory, 'h264')
            prores_directory = os.path.join(directory, 'prores')

            for d in (h264_directory, prores_directory):
                    if not os.path.isdir(d):
                        try:
                            os.mkdir(d, 0o777)
                        except (OSError, ValueError) as e:
                            print(f'Error: {sys.exc_info()[0]}, os.mkdir({d}, 0o777) : {e.args}')
                            info = sys.exc_info()[1]
                            m.error(f'Error: {info}')
                            print(f'\tos.mkdir(\n\t\t{d}, 0o777)')
                            return

            print()
            ffmpeg = 'time ffmpeg -v 0 -y -threads 24 -stats -i {0} -vf scale={1} -c:v libx264 -preset veryslow -crf 20 -pix_fmt yuv420p -tune grain {2}'.format(mov_filepath, resolution, mp4_filepath)
            mp4 = subprocess.check_output(ffmpeg.split(), universal_newlines=True).strip()
            print(mp4)

            mov_dest = os.path.join(prores_directory, mov_file)

            try: 
                os.rename(mov_filepath, mov_dest)
                m.success(f'Moving:\n\t{mov_filepath} to\n\t{mov_dest}.')
            except (OSError, ValueError) as e:
                info = sys.exc_info()[1]
                m.error(f'Error: {info}')
                print(f'\tos.rename(\n\t\t{mov_filepath}:\n\t\t{os.path.join(prores_directory, mov_file)}\n\t)')
                return


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--path', help='Directory to watch..', action='store', required=True)
    args = parser.parse_args()

    path = os.path.normpath(os.path.abspath(args.path))


    watch = Watch(path)
    watch.run()
