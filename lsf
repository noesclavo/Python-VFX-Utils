#!/usr/bin/env python3

import os
import re
import argparse
from m_lib import misc

m = misc.Misc()
p = misc.Print()


class LSF(object):

    def __init__(self, paths):
        self.paths = paths
        self.seqs = {}
        self.seqrx = re.compile(r'(.+)(\.|\_)(\d+)(\.\w+$)')

        self.get_sequences()
        self.parse_sequence()

    def get_sequences(self):
        for path in self.paths:
            path = os.path.abspath(path)
            if os.path.isdir(path):
                files = os.listdir(path)
                frames = []
                for file in files:
                    match = self.seqrx.search(file)
                    if match:
                        (name, delimeter, frame, ext) = match.groups()
                        self.seqs[name] = {
                            'delimeter': delimeter,
                            'ext': ext,
                            'frames': frames,
                        }

                        self.seqs[name]['frames'].append(int(frame))

    def parse_sequence(self):
        for seq in self.seqs.keys():
            frames = sorted(self.seqs[seq]['frames'])

            first_frame = frames[0]
            last_frame = frames[0]
            prev_frame = frames[0]
            index = 1

            while frames[index]:
                i = 1
                while frames[index] != prev_frame + i:
                    i += 1
                    print(frames[index] + index, 'is missing')
                else:
                    prev_frame = frames[index]
                    next_frame = frames[index] + 1
                    index += 1






if __name__ == '__main__':
    default_dir = os.path.abspath('.')

    parser = argparse.ArgumentParser(
        prog='lsf',
        description='List Image Sequences.',
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument('path', nargs='*', help=f'List of one or more directories to search.\nDefault: {default_dir}', default=[default_dir])
    args = parser.parse_args();
    LSF(args.path)
