#!/usr/bin/env python3

class Convert(object):
    def __init__(self, args):
        self.files = args.files
        self.scale = 1

        if args.scale is not None:
            if float(args.scale) > 0.0:
                self.scale = float(args.scale)
            else:
                self.scale = 1.0

    def convert(self):
        import ffmpeg
        import os

        for file in self.files:
            outfile = '{}.mp4'.format(os.path.splitext(file)[0])

            height = -1
            width = -1
            print('Executing ffmpeg.probe({})'.format(file))
            probe = ffmpeg.probe(file)
            for stream in probe['streams']:
                if stream['codec_type'] == 'video':
                    width = stream['width']
                    height = stream['height']

            width *= self.scale
            height *= self.scale
            size = '{0}:{1}'.format(int(width), int(height))

            input = ffmpeg.input(file, loglevel=32, threads=24)
            audio = input.audio
            video = input.video.filter(
                'scale', size=size
            )

            ffmpeg.output(video, audio, outfile,
                vcodec='libx264',
                crf=20,
                preset='slower',
                pix_fmt='yuv420p',
            ).overwrite_output().run(capture_stdout=True)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('files', help='Video files to be converted..', nargs='+', action='extend')
    parser.add_argument('-s', '--scale', help='Floating point number to scale the original mov by.', action='store')

    c = Convert(parser.parse_args())
    c.convert()

